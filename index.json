[{"content":"习惯了使用绿色版软件，VSCode日常使用频率很高，记录一下如何使用windows批处理添加右键菜单以及注册文件关联。\n新建任意文件，文件后缀改为cmd或者bat，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 chcp 65001 @echo off setlocal :: 获取VSCode的路径 set \u0026#34;vscodePath=%~dp0Code.exe\u0026#34; :: 文件类型列表 set \u0026#34;fileTypes=php js html css scss yaml yml conf ini toml json jsp asp cpp bat cmd reg sh profile config bashrc md\u0026#34; :: 显示菜单 :menu cls echo. echo 1. 创建右键菜单 echo 2. 删除右键菜单 echo 3. 关联文件类型到VSCode echo 4. 退出 echo. set /p \u0026#34;choice=请输入你的选择(1-4): \u0026#34; :: 根据用户的选择执行相应的操作 if \u0026#34;%choice%\u0026#34;==\u0026#34;1\u0026#34; goto create if \u0026#34;%choice%\u0026#34;==\u0026#34;2\u0026#34; goto delete if \u0026#34;%choice%\u0026#34;==\u0026#34;3\u0026#34; goto associate if \u0026#34;%choice%\u0026#34;==\u0026#34;4\u0026#34; goto end goto menu :: 创建右键菜单 :create reg add \u0026#34;HKCR\\*\\shell\\Open with VSCode\u0026#34; /ve /d \u0026#34;Open with VSCode\u0026#34; /f reg add \u0026#34;HKCR\\*\\shell\\Open with VSCode\u0026#34; /v \u0026#34;Icon\u0026#34; /d \u0026#34;%vscodePath%\u0026#34; /f reg add \u0026#34;HKCR\\*\\shell\\Open with VSCode\\command\u0026#34; /ve /d \u0026#34;\\\u0026#34;%vscodePath%\\\u0026#34; \\\u0026#34;%%1\\\u0026#34;\u0026#34; /f reg add \u0026#34;HKCR\\Directory\\shell\\Open with VSCode\u0026#34; /ve /d \u0026#34;Open with VSCode\u0026#34; /f reg add \u0026#34;HKCR\\Directory\\shell\\Open with VSCode\u0026#34; /v \u0026#34;Icon\u0026#34; /d \u0026#34;%vscodePath%\u0026#34; /f reg add \u0026#34;HKCR\\Directory\\shell\\Open with VSCode\\command\u0026#34; /ve /d \u0026#34;\\\u0026#34;%vscodePath%\\\u0026#34; \\\u0026#34;%%1\\\u0026#34;\u0026#34; /f echo. echo 右键菜单已创建。 pause goto menu :: 删除右键菜单 :delete reg delete \u0026#34;HKCR\\*\\shell\\Open with VSCode\u0026#34; /f reg delete \u0026#34;HKCR\\Directory\\shell\\Open with VSCode\u0026#34; /f echo. echo 右键菜单已删除。 pause goto menu :: 关联文件类型到VSCode :associate for %%i in (%fileTypes%) do ( reg add \u0026#34;HKCR\\.%%i\\OpenWithProgids\u0026#34; /v \u0026#34;VSCode.%%i\u0026#34; /f reg add \u0026#34;HKCR\\VSCode.%%i\\shell\\open\\command\u0026#34; /ve /d \u0026#34;\\\u0026#34;%vscodePath%\\\u0026#34; \\\u0026#34;%%1\\\u0026#34;\u0026#34; /f ) echo. echo 文件类型已关联到VSCode。 pause goto menu :: 退出 :end endlocal fileTypes的值改为需要关联的文件类型\n脚本是AI写的。。\n","permalink":"https://ttt.td/2023/11/05/adding-context-munes-and-file-association-to-vscode/","summary":"\u003cp\u003e习惯了使用绿色版软件，VSCode日常使用频率很高，记录一下如何使用windows批处理添加右键菜单以及注册文件关联。\u003c/p\u003e","title":"为VSCode添加右键菜单以及注册文件关联"},{"content":"手机是Mate40Pro，老机型了，刚买到手的时候是EMUI，由于对Google应用存在一定依赖性，而平时日常工作生活华为周边带来不少便利性以及习惯因素，致使我没条件换其它品牌的全家桶可是又想使用Google相关软件，所以买回来第一件事安装了Google套件，然而从EMUI11到HarmonyOS2.0，3.0版本，Google应用在我手机上工作一切正常，直到近期升级到了4.0 Beta版本，发现Google已经弹窗设备未认证\n原因排查 更新到鸿蒙4之后第二天，我的手机状态栏提示“该设备未通过Google Play保护机制认证”。并且Youtube、Gmail、Authenticator应用均无法正常使用（我倒是重度Authenticator用户）；索性把Google相关软件卸载干净打算重新安装。 安装方式其实和之前的是差不多的，三大步骤分别是激活谷歌服务助手并登录好账号、安装依赖组件、消除认证弹窗； 在重新尝试安装后，以上的三大步骤均已顺利完成，并且已经完全可以正常使用。 可是到第二天，大概是24小时左右，同样的错误还是来了，观察发现我安装的Google Play服务以及Google Play商店均已更新到最新版本，而我安装时Play服务为20.12.xx版本，更新后变成了23.24.xx版本。估计是4.0还处于Beta阶段，AOSP部分还有东西没砍干净而新版本的Google Play服务可以检测到，因为网上各种分享的教程都是使用Google Play服务20.12.xx版本特别巧雕不要更新； 其实23版本在鸿蒙3期间我也稳定用了一年左右没有问题，不知道为啥在鸿蒙4上就是不行，不管那么多想办法不让它更新吧，我开始在Play商店各种设置不自动更新不自动下载，发现没有用，这玩意它还是会自动把Play服务给更新，可能这是它的核心APP吧，然后我尝试在手机管家中禁用Play商店联网，好家伙打开商店询问是否解除联网限制，我选择不解除，可它完全不受影响，完全正常工作，可以浏览和下载安装。 截止现在是2023-07-20 03:36，我使用了个折中的方法把Play商店给“干掉了”，不过目前还有待观察\n安装步骤 下载工具 密码: 78vvjc 将压缩包内容中的Huawei.zip覆盖解压到手机存储根目录 将手机时间年份调至2019年 进入设置-系统和更新-备份和回复右上角四个点-从内部存储恢复，选择并输入提示得密码进行恢复谷歌服务助手 打开谷歌服务助手按照提示点击激活以及给存储权限 将系统时间调回自动 安装0号apk文件：MicroG 打开MicroG，点击Account登录自己的账号，可以登录多个 安装1号apk文件 com.google.android.gms.policy_sidecar_aps 安装2号apk文件 Google账户管理程序 安装3号apk文件 SharedLibrary 安装4号apk文件 Google Play 商店 安装5号apk文件 Google通讯录同步 安装6号apk文件 Google服务框架 卸载之前安装的0号文件 MicroG 安装7号apk文件 Google Play 服务 打开Play应用商店刷新到加载完成 正常情况加载出界面后开始有提示 强行停止Play商店 开飞行模式，将Google服务框架、Google Play服务和Google Play商店依次强行停止再清除所有数据和缓存 关闭飞行模式通网 解决Play商店自动更新Play服务 连接电脑使用adb命令禁用Play商店即可\n1 2 adb devices #查看连接状态 adb shell pm disable-user com.android.vending 安装Aurora Store用于替代Play商店 下载地址：https://pan.bi/s/PyTP\n完事？ 不确定可以多久不弹窗，理论上使用20.12.xx版本的Play服务是没有问题的，但是还有待观察，如果能突破48小时不弹窗，我再继续跟进启用Play商店尝试，本文持续更新\n2023-08-08更新 久等了，测试了一段时间，也忙了一段时间，现在水一波更新 目前使用的方法是使用Android 12版本的服务框架，同时停用服务框架和Play商店，改用Aurora商店来下载和更新软件，特征如下\n不再报“设备未获得Play认证”或“保护机制”相关的弹窗提示 FCM服务可用性提升（嗯，只是提升，达不到100%，可能和魔法环境有关） 同时也存在以下几个问题：\nChrome热更新后依赖商店会闪退和不可用 已经安装的通过Google 付费订阅的APP不受影响，我的JuiceSSH和SD Maid高级版没有受到影响 已订阅的APP但是中途卸载再重新使用Aurora Store安装的应用无法使用“恢复购买”来恢复订阅 操作步骤 完成上面操作部分确保没有弹窗 打开飞行模式 安装Google PLAY Services 21.48.15 FIX 下载地址 找到Google账户管理程序-强行停止-清空缓存-删除数据 重启 安装Google PLAY Service_22.36.16 UPDATE 下载地址 安装Google Services Framework_12-31_UPDATE 下载地址 找到Google账户管理程序-强行停止-清空缓存-删除数据 执行adb命令 adb shell pm disable-user --user 0 com.google.android.gsf 来停用Google服务框架 重启 检查Play商店和Google服务框架是否均为停用状态 再次清除Google账户管理程序的缓存和数据 重启并关闭飞行模式 操作完成之后基本就是完成了\n2023-08-23更新 经过一段时间的尝试，同时借鉴了华谷套件最新版的处理方法，目前Play商店可用且不弹窗已经稳定5天，分享一下折腾经验以及利弊，该方法特性如下：\nGoogle Play 服务可以停留在v20版本不会自动更新 没有Play保护机制认证弹窗 Play商店可以正常使用 FCM无法正常使用 由于v20版本的Play服务版本较老，Google系软件部分功能不可用，如Chrome的密码管理器、Binance APP的Google登录等 如果重度依赖Play商店或者有Play商店内购订阅较多用户可以尝试该方法，执行该方法前续确保最前面的安装步骤的前15步已经操作完成，接着15步之后执行如下操作：\n准备工作，下载https://pan.bi/s/VNF1的三个文件备用，且手机科学上网为开启状态 安装Google Play services_23.31.16 (040400-555695945).apk (先不着急安装Play商店) 等待通知栏弹窗 (必须为科学上网状态，否则不弹窗) 安装Google Play Store_37.1.22-21 [0] [PR] 557669241.apk并运行，确认可以正常加载打开(弹窗先不管) 开启飞行模式 将Google服务框架强行停止并删除数据 将Google Play 服务强行停止并清空缓存 将Google Play 商店强行停止并删除数据 重启手机 将Google Play 服务强行停止-管理空间-清除所有数据 重启手机并关闭飞行模式 打开Google Play 商店确保可以正常打开加载页面并且通知栏不再弹窗 卸载Google Play 服务然后重新安装Google Play 服务_20.12.14 (120406-302211955).apk 打开Google Play 商店确保可以正常打开加载页面并且通知栏不再弹窗 完成 说不上原理但这种方式确实到目前为止Google Play服务没有被自动更新也没有再弹窗，有需要的可以尝试一下。 当然弊端上面也说了，FCM通知不再可用，部分依赖Google Play 服务的应用功能无法使用，介意的话可以使用8-8更新的方法，Play商店和FCM以及完整功能依赖两者需要做出取舍 附图 2023-09-12更新 由于08-23提供的方法可以正常使用但是FCM不可用，并且导致一些App无法正常调用Google OAuth，现根据酷安某大佬测试的方法更新。 该方法实际上是结合一下之前08-08更新中的一个操作，操作之前需确认08-23方法已经可以正常使用。在08-23的基础上再次执行adb命令adb shell pm disable-user --user 0 com.google.android.gsf来停用Google服务框架，停用之后可以在Aurora Store中将Google Play服务更新到最新版本并且不会有认证提示！ 目前测试了几天，FCM推送正常，Binance App登录正常，Chrome密码管理器也已经可用\n","permalink":"https://ttt.td/2023/11/04/harmonyos4-install-gms/","summary":"\u003cp\u003e手机是Mate40Pro，老机型了，刚买到手的时候是EMUI，由于对Google应用存在一定依赖性，而平时日常工作生活华为周边带来不少便利性以及习惯因素，致使我没条件换其它品牌的全家桶可是又想使用Google相关软件，所以买回来第一件事安装了Google套件，然而从EMUI11到HarmonyOS2.0，3.0版本，Google应用在我手机上工作一切正常，直到近期升级到了4.0 Beta版本，发现Google已经弹窗设备未认证\u003c/p\u003e","title":"华为鸿蒙4.0安装Google套件的尝试"},{"content":"介绍 Shodan是世界上第一个搜索引擎，用于搜索互联网上的连接设备。通过Shodan，用户可以找到服务器、网络摄像头、打印机、路由器等设备。Shodan收集了互联网上所有设备的信息，包括设备的IP地址、开放的端口、操作系统、服务等。这些信息对于网络安全研究人员、大公司和执法机构来说非常有价值。Shodan的目标是帮助世界理解互联网的复杂性，提高人们对网络安全的认识。\n基本使用语法 shodan有三种使用方式，分别如下：\n使用https://shodan.io官网进行查询 使用Shodan CLI在命令行下使用(目前我主要用法) 使用Shodan API进行查询 使用CLI查询 几乎支持全平台操作系统使用，只需要Python环境和Pip即可\n1 pip install shodan 安装完后登录https://account.shodan.io/查看API KEY\n1 2 shodan init APIKey #替换获取的APIKey shodan info #查询用量 CLI下基本语法 查询域名\n1 shodan domain example.com 查询IP\n1 shodan host 1.1.1.1 WebServer搜索 查询一下标题包含Hexo的主机，输出格式为IP,端口,网站标题,域名,主机名\n1 shodan search http.title:\u0026#34;hexo\u0026#34; --fields ip_str,port,http.title,domains,hostnames 更多语法 访问官方帮助中心: https://help.shodan.io\nshodan高级计划 shodan提供了免费的查询额度，可以选择提升用户计划获得更多查询额度，官方的价格如下 如果有需要的朋友可以本文留言主要用途以及接收邮箱，我们可以赠送价值$359/mo的Small Business套餐账户，每月拥有20万次查询额度以及655325次扫描额度 请自觉遵守相关法律，鼓励用于安全研究及网络查障，切勿用于非法用途。\n","permalink":"https://ttt.td/2023/11/04/easy-to-use-shodan/","summary":"\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cp\u003eShodan是世界上第一个搜索引擎，用于搜索互联网上的连接设备。通过Shodan，用户可以找到服务器、网络摄像头、打印机、路由器等设备。Shodan收集了互联网上所有设备的信息，包括设备的IP地址、开放的端口、操作系统、服务等。这些信息对于网络安全研究人员、大公司和执法机构来说非常有价值。Shodan的目标是帮助世界理解互联网的复杂性，提高人们对网络安全的认识。\u003c/p\u003e","title":"Shodan的基本使用"},{"content":" 之前一直使用SafeinCloud软件进行密码管理，体验很不错，但是有一个弊端就是在浏览器中使用也需要在PC中安装好密码管理器，无法通过浏览器插件直接通信，选择它的目的是密码数据库可以自托管而无需使用软件商提供的云服务；一来对极致注重隐私的用户来说体验很OK，二来不会产生固定使用成本;为了解决浏览陈体验，这次尝试使用Vaultwarden进行密码管理；但是！！！Bitwarden在部分浏览器中体验也并不完美，例如在Firefox中很多网站填写完账号密码表单之后并没有保存密码的提示，用户可酌情选择。\n安装方法 这里使用Docker Compose的方式，命令如下\n1 2 mkdir -p /opt/vault #创建目录 touch /opt/vault/docker-compose.yml #创建docker-compose配置文件 这里需要注意一下，需要启用Admin管理页面的话需要创建管理员密码，在Dockerfile的env中需要指定管理员Token，这里使用Argon2来创建，在SSH中执行一下echo -n \u0026quot;需要设置的密码\u0026quot; | argon2 \u0026quot;$(openssl rand -base64 32)\u0026quot; -e -id -k 19456 -t 2 -p 1来创建一个token，创建完成后复制输出内容，一会要用到。\n编辑opt/vault/docker-compose.yml文件，填入以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 version: \u0026#39;3.3\u0026#39; services: server: container_name: bitwardenrs restart: unless-stopped environment: - WEBSOCKET_ENABLED=true #是否启用Websocket - SIGNUPS_ALLOWED=true #是否允许用户注册 - ADMIN_TOKEN=刚刚生成的一串密钥 #将刚刚生成的Token完整的贴在这里 volumes: - \u0026#39;./data/:/data/\u0026#39; #将Docker数据目录映射到当前目录data/文件夹下 ports: - \u0026#39;35667:80\u0026#39; #web端口，用于反代 - \u0026#39;3012:3012\u0026#39; #Websocket端口 image: \u0026#39;vaultwarden/server:latest\u0026#39; 保存后执行docker compose up -d(对于较新版本的Docker，版本老一点的需额外安装docker-compose的话就是docker-compose up -d)\n安装完成后访问IP:35667即可访问后台，建议先配置好反向代理再使用，后台路径为/admin 管理员密码为开始用于生成Argon2密钥设置的密码，需要记住。\n如果想直接用的话 我自己部署了一套：https://passbox.ttt.td 有需求的用户可以自行注册尝试使用，即使管理员也无法查看明文密。介意或者洁癖用户还是建议自部署，真的很简单\n","permalink":"https://ttt.td/2023/11/04/build-owner-vaultwarden-and-use-bitwarden-to-manage-password/","summary":"\u003cblockquote\u003e\n\u003cp\u003e之前一直使用SafeinCloud软件进行密码管理，体验很不错，但是有一个弊端就是在浏览器中使用也需要在PC中安装好密码管理器，无法通过浏览器插件直接通信，选择它的目的是密码数据库可以自托管而无需使用软件商提供的云服务；一来对极致注重隐私的用户来说体验很OK，二来不会产生固定使用成本;为了解决浏览陈体验，这次尝试使用Vaultwarden进行密码管理；但是！！！Bitwarden在部分浏览器中体验也并不完美，例如在Firefox中很多网站填写完账号密码表单之后并没有保存密码的提示，用户可酌情选择。\u003c/p\u003e\n\u003c/blockquote\u003e","title":"自建vaultwarden并使用Bitwarden软件管理密码"},{"content":" 先是去年3月份国内知名统计分析服务CNZZ(友盟)停止对海外域名提供网站统计分析服务，再是前阵子百度统计功能针对未备案域名的功能阉割，对于有看站点数据的站长来说，部署一套私有化的统计分析服务目前显得尤为重要，我昨天花了点时间捣腾了一下Umami\nUmami特点 国际化\u0026amp;多语言 支持开源私有化部署——免费安全 它足够轻量，当然功能相对来说比较基础 自定义功能比较丰富 可关闭项目遥测功能(项目官方的匿名化收据收集用于分析) 脚本名以及collect方法命名可自定义，可用于解决一些通用的广告拦截器规则对脚本拦截导致统计信息不准确 安装前提(源码运行) 已经安装了MySQL数据库 已安装Nodejs、Yarn 已安装好pm2用于进程守护 NodeJS、Yarn、PM2安装可参考自建Giscus为Hexo添加评论功能一文中有介绍 开始部署 拉取项目源码并安装所需依赖 1 2 3 git clone https://github.com/umami-software/umami.git cd umami yarn install 配置网站 在项目目录下执行touch .env创建环境变量文件随后vi .env添加如下内容\n1 2 3 4 DATABASE_URL = mysql://数据库用户名:数据库密码@数据库地址:数据库端口/数据库名 ;使用MySQL连接 TRACKER_SCRIPT_NAME = 统计脚本名 ;这里是统计脚本中JS文件名，不需要.js后缀 COLLECT_API_ENDPOINT = /api/跟踪器名称 ;例如DontBlockMe DISABLE_TELEMETRY = 1 ;禁用官方遥测功能 开始运行 执行yarn build进行编译 完成后使用yarn start开始运行，默认监听3000端口，可在浏览器中输入IP:3000进行访问\n进程守护 1 2 3 pm2 start yarn -n umami -- start --port 8002 #使用PM2启动应用，并监听8002端口 pm2 save #保存PM2配置 pm2 startup #设置开机自启动 配置反代 略了\u0026hellip; 不过需要注意的是，如果使用CDN，最好关闭缓存功能\n最后 ","permalink":"https://ttt.td/2023/11/04/self-hosting-analytics-tool/","summary":"\u003cblockquote\u003e\n\u003cp\u003e先是去年3月份国内知名统计分析服务CNZZ(友盟)停止对海外域名提供网站统计分析服务，再是前阵子百度统计功能针对未备案域名的功能阉割，对于有看站点数据的站长来说，部署一套私有化的统计分析服务目前显得尤为重要，我昨天花了点时间捣腾了一下Umami\u003c/p\u003e\n\u003c/blockquote\u003e","title":"自部署Umami开源网站统计工具"},{"content":" 一个轻量级的自托管备忘录。 开源且永远免费。\n官方 Home: https://usememos.com Demo: https://demo.usememos.com GitHub: https://github.com/usememos/memos\n为什么自编译二进制 因为玩不来Docker\n编译方法 需要go、yarn环境，不再阐述安装方法\n1 2 3 4 5 6 7 8 mkdir /var/opt/memos #创建运行目录 git clone -b release/xxx https://github.com/usememos/memos.git #release/xxx换成当前需要编译的版本号 cd memos #进入源码目录 cd web #进入前端目录，可以自行替换logo.png等 yarn \u0026amp;\u0026amp; yarn build #编译前端文件，会在当前目录(web/)下生成dist文件夹 cd .. rm -rf server/dist/ \u0026amp;\u0026amp; mv web/dist/ server/ #将编译好的前端静态资源放入后端目录等会一块编译 go build -o /var/opt/memos/memos bin/server/main.go #编译二进制文件并放入运行目录 至此，二进制文件已经编译完成\nSupervisor配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 apt install -y supervisor #安装supervisor，Redhat系换yum touch /etc/supervisor/conf.d/memos.conf #创建配置文件 mkdir -p /var/log/memos #创建日志存储目录 vim /etc/supervisor/conf.d/memos.conf #编辑配置文件，输入以下内容 [program: memos] command=/var/opt/memos/memos -mode prod -port 12345 directory=/var/opt/memos autorestart=true autostart=true stderr_logfile=/var/log/memos/memos.err.log stderr_logfile_maxbytes=10KB stdout_logfile=/var/log/memos/memos.out.log stdout_logfile_maxbytes=10KB user=root startsecs=1 #以上-port 12345改成自己指定端口 chmod u+x /var/opt/memos/memos #赋予可执行权限 supervisorctl reread #读取配置 supervisorctl reload #重载配置 supervisorctl update #更新配置 supervisorctl start memos #启动应用 systemctl enable supervisor #将Supervisor加入开机启动 完成 创建反向代理指向IP:PORT即可完成部署\n","permalink":"https://ttt.td/2023/11/04/build-memos/","summary":"\u003cblockquote\u003e\n\u003cp\u003e一个轻量级的自托管备忘录。  开源且永远免费。\u003c/p\u003e\n\u003c/blockquote\u003e","title":"二进制编译Memos开源笔记应用"},{"content":"差不多折腾完Hexo应用，弄评论功能的时候找了一下评论相关插件，然后看到了这么一篇文章 建议大家弃用 Gitalk 和 Gitment 等权限过高的 Github OAuth App 翻了一堆资料找到了这个项目：Giscus 这个不属于OAuth应用，与此同时，我想自建！！做一下记录\n准备工作(废话) 一个域名 一台VPS 一个Github账号 创建应用 去这个页面开始创建 GitHub App Name —— 随便填 Homepage URL —— 填写准备的域名 https://域名 Callback URL —— 填写https://域名/api/oauth/authorized Expire user authorization tokens —— 取消勾选 Request user authorization (OAuth) during installation —— 取消勾选 Repository permissions —— 找到Discussions选择Read \u0026amp; write User permissions —— Where can this GitHub App be installed?处选择Only on this account 点击Create GitHub App按钮开始创建 创建好Client Secret，同时保存好App ID、Client ID 往下翻，点击Generate a private key，会下载一个证书文件，先保存 配置Supabase缓存表 去https://supabase.io/注册用户并登陆 创建一个项目，接着进入项目创建一个TABLE，名字用installation_access_tokens 创建表，使用import导入如下内容\n1 2 3 4 5 installation_id: int8, no default value, primary key, uncheck Is Identity token: varchar, no default value expires_at: timestamptz, no default value created_at: timestamptz, default value NOW() updated_at: timestamptz, default value NOW() 获取项目URL(格式是https://xxxxx.supabase.co) 获取service_role值，保存\n安装Nodejs、npm、yarn等软件 1 2 3 4 5 6 7 8 9 10 11 sudo apt purge nodejs sudo apt autoremove sudo apt update sudo apt install -y curl curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - sudo apt install nodejs build-essential -y node --version sudo corepack enable npm sudo corepack enable yarn npm --version yarn --version 部署Giscus 1 2 3 4 cd /opt #进入目录 git clone https://github.com/giscus/giscus.git #拉取源码 cd giscus #进入目录 cp .env.example .env.local #重命名配置文件 刚刚保存的东西填进.env.local文件 开始编译和运行测试\n1 2 3 yarn install yarn build yarn start 目前已经运行在0.0.0.0:3000了\n使用PM2配置进程守护 1 2 3 4 5 npm install -g pm2 #安装pm2 cd /opt/giscus #进入运行目录 pm2 start yarn -n giscus -- start #使用pm2启动 pm2 save #保存配置 pm2 startup #添加开机启动并注册系统服务 如图所示启动成功\n配置反向代理 不码字了，用开始准备的域名反代指向IP:3000即可\n","permalink":"https://ttt.td/2023/11/04/self-hosting-giscus/","summary":"\u003cp\u003e差不多折腾完Hexo应用，弄评论功能的时候找了一下评论相关插件，然后看到了这么一篇文章\n\u003ca href=\"https://www.v2ex.com/t/535608\"\u003e建议大家弃用 Gitalk 和 Gitment 等权限过高的 Github OAuth App\u003c/a\u003e\n翻了一堆资料找到了这个项目：\u003ca href=\"https://github.com/giscus/giscus\"\u003eGiscus\u003c/a\u003e\n这个不属于OAuth应用，与此同时，我想自建！！做一下记录\u003c/p\u003e","title":"自建Giscus为Hexo添加评论功能"},{"content":"嗯\n食用方法 地址： https://input.im\n概要 使用Lsky-Pro程序搭建 使用了Cloudflare R2存储 使用了Backblaze B2存储 使用了GCore的CDN和OSS服务 自建了一套MinIO存储 利用闲置的机器自建了一套CDN服务(使用中) 自建了NsfwJS的图片审核服务(上传可能会有点慢) 使用条款 为避免滥用，游客身份有部分限制 注册免费用户基本没有什么限制(一天传200张，差不多够了吧) 严禁上传违法违规内容 ","permalink":"https://ttt.td/2023/11/04/free-img-hosting/","summary":"\u003cp\u003e嗯\u003c/p\u003e","title":"分享自己使用LskyPro程序部署了一套图床"},{"content":"使用AdGuardHome自建了一个自用的DNS服务用于抗污染，同时为上游设置国内DNS分流\n先决条件 安装好AdGuardHome后，编辑AdGuardHome.yaml设置upstream_dns_file = \u0026quot;/usr/share/adguardhome.upstream\u0026quot;，设置all_servers = true，设置cache_optimistic = true\n预览 分流规则 1 2 3 4 5 6 7 8 9 10 11 12 # 安装脚本 curl -o \u0026#34;/usr/local/bin/upstream.sh\u0026#34; \u0026#34;https://raw.githubusercontent.com/TTT-TD/AGH_SELF/main/DNS/upsteam.sh\u0026#34; chmod +x /usr/local/bin/upstream.sh /usr/local/bin/upstream.sh # 创建systemd服务定时更新 curl -o \u0026#34;/etc/systemd/system/upstream.service\u0026#34; \u0026#34;https://raw.githubusercontent.com/TTT-TD/AGH_SELF/main/DNS/upsteam.service\u0026#34; curl -o \u0026#34;/etc/systemd/system/upstream.timer\u0026#34; \u0026#34;https://raw.githubusercontent.com/TTT-TD/AGH_SELF/main/DNS/upsteam.timer\u0026#34; systemctl daemon-reload systemctl enable upstream.timer systemctl start upstream.timer systemctl status upstream ","permalink":"https://ttt.td/2023/11/04/build-dns-filter-cn/","summary":"\u003cp\u003e使用AdGuardHome自建了一个自用的DNS服务用于抗污染，同时为上游设置国内DNS分流\u003c/p\u003e","title":"使用AdGuardHome搭建私有DNS并对ChinaDomain进行分流"}]